import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.BMqj9mQ5.js";const t=JSON.parse('{"title":"git init 之后 如何把master改成main","description":"","frontmatter":{},"headers":[],"relativePath":"pages/碎片/【Git】命名上游分支.md","filePath":"pages/碎片/【Git】命名上游分支.md","lastUpdated":1726497216000}'),n={name:"pages/碎片/【Git】命名上游分支.md"},l=e('<h1 id="git-init-之后-如何把master改成main" tabindex="-1">git init 之后 如何把master改成main <a class="header-anchor" href="#git-init-之后-如何把master改成main" aria-label="Permalink to &quot;git init 之后 如何把master改成main&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#语法和用法">语法和用法</a></li><li><a href="#示例">示例</a></li><li><a href="#总结">总结</a></li></ul></nav><p><code>--set-upstream</code> 是一个 Git 命令选项，用于设置当前分支与远程分支的跟踪关系。这个选项在 <code>git push</code> 命令中使用，主要用于将本地分支与远程分支关联起来，以便在未来的推送和拉取操作中可以简化命令。</p><h3 id="语法和用法" tabindex="-1">语法和用法 <a class="header-anchor" href="#语法和用法" aria-label="Permalink to &quot;语法和用法&quot;">​</a></h3><h4 id="_1-设置上游分支" tabindex="-1">1. 设置上游分支 <a class="header-anchor" href="#_1-设置上游分支" aria-label="Permalink to &quot;1. 设置上游分支&quot;">​</a></h4><p>当你第一次将本地分支推送到远程仓库时，可以使用 <code>--set-upstream</code>（简写为 <code>-u</code>）选项：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者简写为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个命令中：</p><ul><li><code>origin</code> 是远程仓库的名称（通常是默认的远程仓库名称）。</li><li><code>&lt;branch-name&gt;</code> 是你要推送的本地分支名称。</li></ul><h4 id="_2-使用-set-upstream-的作用" tabindex="-1">2. 使用 <code>--set-upstream</code> 的作用 <a class="header-anchor" href="#_2-使用-set-upstream-的作用" aria-label="Permalink to &quot;2. 使用 `--set-upstream` 的作用&quot;">​</a></h4><p>使用 <code>--set-upstream</code> 选项将设置当前分支的上游分支。这会告诉 Git 本地分支将跟踪远程仓库中的指定分支。设置后，你可以使用更简洁的 <code>git push</code> 和 <code>git pull</code> 命令，而无需每次都指定远程分支。</p><p>例如，如果你之前设置了上游分支，那么可以使用如下简化命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而不需要指定远程仓库和分支名称。</p><h4 id="_3-更改已存在分支的上游分支" tabindex="-1">3. 更改已存在分支的上游分支 <a class="header-anchor" href="#_3-更改已存在分支的上游分支" aria-label="Permalink to &quot;3. 更改已存在分支的上游分支&quot;">​</a></h4><p>如果你已经有一个本地分支，并且想要更改它跟踪的远程分支，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream-to=origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">branch-name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如，将当前分支的上游设置为 <code>origin/main</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream-to=origin/main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>假设你在本地创建了一个新的分支 <code>feature-branch</code>，并且你希望将它推送到远程仓库 <code>origin</code> 并设置它跟踪远程的同名分支：</p><ol><li><p><strong>推送本地分支并设置上游分支</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>之后，你可以直接使用 <code>git pull</code> 和 <code>git push</code> 命令</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><p>这些命令将自动推送到和拉取自 <code>origin/feature-branch</code> 分支。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>--set-upstream</code> 选项用于将本地分支与远程分支关联起来，简化了将来的推送和拉取操作。设置了上游分支后，可以更方便地管理分支的同步工作。如果你有任何进一步的问题或需要更多帮助，请随时提问！</p>',27),p=[l];function h(d,o,c,k,g,u){return i(),a("div",null,p)}const r=s(n,[["render",h]]),m=Object.freeze(Object.defineProperty({__proto__:null,__pageData:t,default:r},Symbol.toStringTag,{value:"Module"}));export{m as _,t as __pageData,r as default};
