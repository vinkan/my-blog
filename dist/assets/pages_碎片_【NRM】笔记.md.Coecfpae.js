import{_ as e,c as s,o as n,a5 as t}from"./chunks/framework.BMqj9mQ5.js";const a=JSON.parse('{"title":"nrm","description":"","frontmatter":{},"headers":[],"relativePath":"pages/碎片/【NRM】笔记.md","filePath":"pages/碎片/【NRM】笔记.md","lastUpdated":1727748149000}'),i={name:"pages/碎片/【NRM】笔记.md"},r=t(`<h1 id="nrm" tabindex="-1">nrm <a class="header-anchor" href="#nrm" aria-label="Permalink to &quot;nrm&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#nrm是什么">nrm是什么</a></li><li><a href="#nrm的作用">nrm的作用</a></li><li><a href="#nrm主要功能">nrm主要功能</a></li><li><a href="#nrm-的安装">nrm 的安装</a></li><li><a href="#nrm-常用命令">nrm 常用命令</a></li><li><a href="#nrm示例解析">nrm示例解析</a></li><li><a href="#通过nrm指定了源后-只允许安装源内的包吗">通过nrm指定了源后，只允许安装源内的包吗？</a></li></ul></nav><h2 id="nrm是什么" tabindex="-1">nrm是什么 <a class="header-anchor" href="#nrm是什么" aria-label="Permalink to &quot;nrm是什么&quot;">​</a></h2><p><code>nrm</code>（Node Registry Manager）是一个用于管理 Node.js 包管理器（如 <code>npm</code> 和 <code>Yarn</code>）的注册表工具。它可以帮助用户快速切换不同的 npm 源，以便于提高包安装的速度和效率，特别是在中国大陆地区，使用默认的 <code>npm</code> 源往往速度较慢。</p><h2 id="nrm的作用" tabindex="-1">nrm的作用 <a class="header-anchor" href="#nrm的作用" aria-label="Permalink to &quot;nrm的作用&quot;">​</a></h2><p>在使用 <code>npm</code> 的过程中，可能插件安装速度比较慢，我们可能会使用淘宝源对插件进行下载安装。或者在公司内部，有一些私有的插件，需要使用公司的源才可以下载。这种情况，我们就需要设置不同的源来进行下载。每次手动设置相对比较麻烦。而 <code>nrm</code> 可以很好的解决这个问题。</p><h2 id="nrm主要功能" tabindex="-1">nrm主要功能 <a class="header-anchor" href="#nrm主要功能" aria-label="Permalink to &quot;nrm主要功能&quot;">​</a></h2><ol><li><strong>切换 npm 源</strong>：可以快速在多个 npm 源之间切换。</li><li><strong>添加和删除源</strong>：可以自定义添加新的源或删除不需要的源。</li><li><strong>查看当前源</strong>：可以方便地查看当前正在使用的 npm 源。</li><li><strong>列出可用源</strong>：可以查看所有可用的 npm 源列表。</li></ol><h2 id="nrm-的安装" tabindex="-1">nrm 的安装 <a class="header-anchor" href="#nrm-的安装" aria-label="Permalink to &quot;nrm 的安装&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 全局安装 nrm</span></span>
<span class="line"><span>$ npm install nrm -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>安装完成后，输入命令 nrm ls，可以看到默认已经有了 6 个源（带 * 号的为当前使用的源）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* npm ---- https://registry.npmjs.org/</span></span>
<span class="line"><span>  cnpm --- http://r.cnpmjs.org/</span></span>
<span class="line"><span>  taobao - https://registry.npm.taobao.org/</span></span>
<span class="line"><span>  nj ----- https://registry.nodejitsu.com/</span></span>
<span class="line"><span>  npmMirror  https://skimdb.npmjs.com/registry/</span></span>
<span class="line"><span>  edunpm - http://registry.enpmjs.org/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>输入 nrm use taobao，即切换 registry 到 taobao，即可使用淘宝的源进行插件的安装下载了。</p><h2 id="nrm-常用命令" tabindex="-1">nrm 常用命令 <a class="header-anchor" href="#nrm-常用命令" aria-label="Permalink to &quot;nrm 常用命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:right;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>npm install -g nrm</code></td><td style="text-align:right;">全局安装nrm</td></tr><tr><td style="text-align:left;"><code>nrm current</code></td><td style="text-align:right;">查看当前使用的 npm 源</td></tr><tr><td style="text-align:left;"><code>nrm ls</code></td><td style="text-align:right;">列出所有可用的 npm 源</td></tr><tr><td style="text-align:left;"><code>nrm use &lt;name&gt;</code></td><td style="text-align:right;">切换到其他 npm 源</td></tr><tr><td style="text-align:left;"><code>nrm add &lt;name&gt; &lt;url&gt;</code></td><td style="text-align:right;">切添加自定义源</td></tr><tr><td style="text-align:left;"><code>nrm del &lt;name&gt;</code></td><td style="text-align:right;">删除已添加的源</td></tr><tr><td style="text-align:left;"><code>nrm set &lt;name&gt; &lt;new-url&gt;</code></td><td style="text-align:right;">更新已添加的源</td></tr><tr><td style="text-align:left;"><code>nrm test</code></td><td style="text-align:right;">测试所有源的速度</td></tr><tr><td style="text-align:left;"><code>nrm test &lt;name&gt;</code></td><td style="text-align:right;">测试指定源的速度</td></tr></tbody></table><h2 id="nrm示例解析" tabindex="-1">nrm示例解析 <a class="header-anchor" href="#nrm示例解析" aria-label="Permalink to &quot;nrm示例解析&quot;">​</a></h2><ul><li><p><code>npm install -g nrm</code>：全局安装nrm, <strong>注意：如果使用 nvm 那么会安装在当前node版本号文件目录中</strong></p></li><li><p><code>nrm current</code>：查看当前使用的 npm 源</p></li><li><p><code>nrm ls</code>：查看所有配置好的源以及对应名称</p></li><li><p><code>nrm use &lt;name&gt;</code>：切换源，即可使用 <code>name</code> 对应名称的源</p></li><li><p><code>nrm add &lt;name&gt; &lt;url&gt;</code>：添加源，<code>name</code> 是名称，可以自行命名，后面是源的 <code>url</code> 地址。例如，添加一个自定义源<code>nrm add myregistry https://my.custom.registry/</code></p></li><li><p><code>nrm del &lt;name&gt;</code>：删除源，根据名称 <code>name</code> 可以删除对应的源</p></li><li><p><code>nrm set &lt;name&gt; &lt;new-url&gt;</code>：如果需要更新某个源的 URL，可以使用 <code>set</code> 来更新</p></li><li><p><code>nrm test &lt;name&gt;</code> ：测试源的速度，不加对应的 <code>name</code> 名称，测试所有源的速度，添加对应的名称，比如 <code>name</code>，就是测试 <code>name</code> 对应的源的速度</p></li><li><p>更多命令在命令行输入 nrm 即可查看</p></li></ul><h2 id="通过nrm指定了源后-只允许安装源内的包吗" tabindex="-1">通过nrm指定了源后，只允许安装源内的包吗？ <a class="header-anchor" href="#通过nrm指定了源后-只允许安装源内的包吗" aria-label="Permalink to &quot;通过nrm指定了源后，只允许安装源内的包吗？&quot;">​</a></h2><p><strong>不是的。</strong></p><p><code>nrm</code>（npm registry manager）允许你方便地切换和管理 npm 源，但它并不会限制你只能安装指定源内的包。换句话说，通过 <code>nrm</code> 指定了源后，你的 npm 安装命令会从该源中拉取包信息，但如果在该源中找不到指定的包，npm 仍然可能会尝试从默认源（如 npm 官方源）中查找包。</p><p>为了确保只从指定的源中安装包，你需要将 npm 配置锁定到该源。可以使用以下步骤来实现：</p><ol><li><p><strong>通过 nrm 切换源</strong>：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-registry-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>验证当前源</strong>：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>设置严格的 registry 配置</strong>： 可以通过编辑 <code>.npmrc</code> 文件来强制 npm 只从指定的源中安装包。例如，在你的项目根目录下创建或编辑 <code>.npmrc</code> 文件，添加以下内容：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-registry-url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strict-ssl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">always-auth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>锁定范围</strong>（可选）： 如果你只希望对某个范围内的包使用特定的 registry，可以在 <code>.npmrc</code> 中进行如下配置：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@your-scope:registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;your-registry-url&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>通过上述步骤，你可以确保 npm 只从你指定的源中安装包。请注意，<code>strict-ssl</code> 和 <code>always-auth</code> 选项是为了增加安全性，但并不是必需的。</p>`,23),l=[r];function p(o,c,h,m,g,u){return n(),s("div",null,l)}const d=e(i,[["render",p]]),k=Object.freeze(Object.defineProperty({__proto__:null,__pageData:a,default:d},Symbol.toStringTag,{value:"Module"}));export{k as _,a as __pageData,d as default};
