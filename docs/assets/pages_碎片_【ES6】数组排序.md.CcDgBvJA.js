import{_ as e,c as s,o as a,a5 as i}from"./chunks/framework.CkGECXPw.js";const o=JSON.parse('{"title":"sort 数组排序","description":"","frontmatter":{},"headers":[],"relativePath":"pages/碎片/【ES6】数组排序.md","filePath":"pages/碎片/【ES6】数组排序.md","lastUpdated":1726497216000}'),d={name:"pages/碎片/【ES6】数组排序.md"},c=i(`<h1 id="sort-数组排序" tabindex="-1">sort 数组排序 <a class="header-anchor" href="#sort-数组排序" aria-label="Permalink to &quot;sort 数组排序&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#代码详解">代码详解</a></li><li><a href="#sort-方法">sort() 方法</a></li><li><a href="#比较函数">比较函数</a></li><li><a href="#例子">例子</a></li><li><a href="#总结">总结</a></li></ul></nav><p>这段代码使用 JavaScript 的 <code>Array.prototype.sort()</code> 方法对数组 <code>points</code> 进行排序。<code>sort()</code> 方法接受一个可选的比较函数作为参数，来定义排序的顺序。代码中的比较函数 <code>function(a, b) { return a - b; }</code> 用于实现数组的升序排序。</p><h3 id="代码详解" tabindex="-1">代码详解 <a class="header-anchor" href="#代码详解" aria-label="Permalink to &quot;代码详解&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">points.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="sort-方法" tabindex="-1"><code>sort()</code> 方法 <a class="header-anchor" href="#sort-方法" aria-label="Permalink to &quot;\`sort()\` 方法&quot;">​</a></h3><ul><li><strong><code>points.sort(compareFunction)</code></strong>：这是用于对 <code>points</code> 数组进行排序的方法。<code>compareFunction</code> 是一个函数，用来确定数组中两个元素的排序顺序。</li></ul><h3 id="比较函数" tabindex="-1">比较函数 <a class="header-anchor" href="#比较函数" aria-label="Permalink to &quot;比较函数&quot;">​</a></h3><ul><li><strong><code>function(a, b)</code></strong>：这是传递给 <code>sort()</code> 方法的比较函数。在排序过程中，<code>a</code> 和 <code>b</code> 是数组中的两个待比较的元素。</li></ul><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><ul><li><strong><code>a - b</code></strong>：比较函数返回值决定了 <code>a</code> 和 <code>b</code> 的排序顺序： <ul><li>如果 <code>a - b</code> 的结果为负值，则 <code>a</code> 会被排在 <code>b</code> 之前（即 <code>a</code> 小于 <code>b</code>）。</li><li>如果 <code>a - b</code> 的结果为零，则 <code>a</code> 和 <code>b</code> 的位置不变（即 <code>a</code> 等于 <code>b</code>）。</li><li>如果 <code>a - b</code> 的结果为正值，则 <code>a</code> 会被排在 <code>b</code> 之后（即 <code>a</code> 大于 <code>b</code>）。</li></ul></li></ul><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>假设 <code>points</code> 数组是 <code>[40, 100, 1, 5, 25, 10]</code>，排序过程如下：</p><ol><li>比较 <code>40</code> 和 <code>100</code>：<code>40 - 100</code> 结果为 <code>-60</code>，<code>40</code> 排在 <code>100</code> 之前。</li><li>比较 <code>40</code> 和 <code>1</code>：<code>40 - 1</code> 结果为 <code>39</code>，<code>40</code> 排在 <code>1</code> 之后。</li><li>比较 <code>40</code> 和 <code>5</code>：<code>40 - 5</code> 结果为 <code>35</code>，<code>40</code> 排在 <code>5</code> 之后。</li><li>比较 <code>40</code> 和 <code>25</code>：<code>40 - 25</code> 结果为 <code>15</code>，<code>40</code> 排在 <code>25</code> 之后。</li><li>比较 <code>40</code> 和 <code>10</code>：<code>40 - 10</code> 结果为 <code>30</code>，<code>40</code> 排在 <code>10</code> 之后。</li></ol><p>经过以上步骤和其他比较，最终数组 <code>points</code> 将被排序为 <code>[1, 5, 10, 25, 40, 100]</code>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong><code>a</code> 和 <code>b</code></strong>：代表数组中的两个元素。</li><li><strong><code>a - b</code></strong>：计算这两个元素的差值，用来决定它们的排序顺序。</li></ul>`,17),t=[c];function l(r,h,p,k,E,u){return a(),s("div",null,t)}const n=e(d,[["render",l]]),g=Object.freeze(Object.defineProperty({__proto__:null,__pageData:o,default:n},Symbol.toStringTag,{value:"Module"}));export{g as _,o as __pageData,n as default};
