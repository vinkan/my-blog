import{_ as e,c as a,o as i,a5 as s}from"./chunks/framework.BMqj9mQ5.js";const t=JSON.parse('{"title":"git命令行实现创建分支并发布该分支","description":"","frontmatter":{},"headers":[],"relativePath":"pages/碎片/【Git】创建并分布分支.md","filePath":"pages/碎片/【Git】创建并分布分支.md","lastUpdated":1726497216000}'),d={name:"pages/碎片/【Git】创建并分布分支.md"},n=s('<h1 id="git命令行实现创建分支并发布该分支" tabindex="-1">git命令行实现创建分支并发布该分支 <a class="header-anchor" href="#git命令行实现创建分支并发布该分支" aria-label="Permalink to &quot;git命令行实现创建分支并发布该分支&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-创建新的分支并切换到该分支">1. 创建新的分支并切换到该分支</a></li><li><a href="#_2-确保-dev-分支包含-main-分支的代码">2. 确保 dev 分支包含 main 分支的代码</a></li><li><a href="#_3-推送新的-dev-分支到远程仓库-如果需要">3. 推送新的 dev 分支到远程仓库（如果需要）</a></li><li><a href="#示例操作流程">示例操作流程</a></li><li><a href="#总结">总结</a></li></ul></nav><blockquote><p>当前在<code>main</code>分支，在命令行中实现：创建开发分支<code>dev</code>（包含main分支的代码）然后切换到dev分支开始开发</p></blockquote><p>你可以在命令行中通过几个简单的 Git 命令来创建一个新的分支 <code>dev</code>，并且切 换到该分支。以下是步骤：</p><h3 id="_1-创建新的分支并切换到该分支" tabindex="-1">1. 创建新的分支并切换到该分支 <a class="header-anchor" href="#_1-创建新的分支并切换到该分支" aria-label="Permalink to &quot;1. 创建新的分支并切换到该分支&quot;">​</a></h3><p>使用以下命令可以同时创建 <code>dev</code> 分支并切换到该分支：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-确保-dev-分支包含-main-分支的代码" tabindex="-1">2. 确保 <code>dev</code> 分支包含 <code>main</code> 分支的代码 <a class="header-anchor" href="#_2-确保-dev-分支包含-main-分支的代码" aria-label="Permalink to &quot;2. 确保 `dev` 分支包含 `main` 分支的代码&quot;">​</a></h3><p>在创建 <code>dev</code> 分支时，它会基于你当前所在的分支（在这个例子中是 <code>main</code>）。因此，<code>dev</code> 分支将包含 <code>main</code> 分支的所有代码和提交历史。</p><h3 id="_3-推送新的-dev-分支到远程仓库-如果需要" tabindex="-1">3. 推送新的 <code>dev</code> 分支到远程仓库（如果需要） <a class="header-anchor" href="#_3-推送新的-dev-分支到远程仓库-如果需要" aria-label="Permalink to &quot;3. 推送新的 `dev` 分支到远程仓库（如果需要）&quot;">​</a></h3><p>如果你想将新的 <code>dev</code> 分支推送到远程仓库并让它在远程仓库中可用，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将创建一个远程 <code>dev</code> 分支，并将本地 <code>dev</code> 分支与远程分支关联起来。</p><h3 id="示例操作流程" tabindex="-1">示例操作流程 <a class="header-anchor" href="#示例操作流程" aria-label="Permalink to &quot;示例操作流程&quot;">​</a></h3><ol><li><p><strong>切换到 <code>main</code> 分支</strong>（确保你在正确的分支上）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>创建并切换到 <code>dev</code> 分支</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>（可选）推送 <code>dev</code> 分支到远程仓库</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><code>git checkout -b dev</code>：创建 <code>dev</code> 分支并切换到该分支。</li><li><code>git push -u origin dev</code>：将 <code>dev</code> 分支推送到远程仓库并设置上游分支。</li></ul><p>通过这些命令，你可以轻松地从 <code>main</code> 分支创建一个新的 <code>dev</code> 分支，并开始在 <code>dev</code> 分支上进行开发。如果有任何其他问题或者需要更多帮助，请随时提问！</p>',18),l=[n];function o(p,c,r,k,u,g){return i(),a("div",null,l)}const h=e(d,[["render",o]]),v=Object.freeze(Object.defineProperty({__proto__:null,__pageData:t,default:h},Symbol.toStringTag,{value:"Module"}));export{v as _,t as __pageData,h as default};
