import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CkGECXPw.js";const e=JSON.parse('{"title":"vue2 中的 inject","description":"","frontmatter":{},"headers":[],"relativePath":"pages/碎片/【Vue2】provide和inject.md","filePath":"pages/碎片/【Vue2】provide和inject.md","lastUpdated":1726497216000}'),l={name:"pages/碎片/【Vue2】provide和inject.md"},t=n(`<h1 id="vue2-中的-inject" tabindex="-1">vue2 中的 inject <a class="header-anchor" href="#vue2-中的-inject" aria-label="Permalink to &quot;vue2 中的 inject&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#inject-的作用">inject 的作用</a></li><li><a href="#使用场景">使用场景</a></li><li><a href="#代码示例">代码示例</a></li><li><a href="#解释">解释</a></li><li><a href="#注意事项">注意事项</a></li><li><a href="#总结">总结</a></li></ul></nav><p>在 Vue 2 中，<code>inject</code> 是一个用来在组件中注入依赖的选项。它通常与 <code>provide</code> 选项配合使用，以实现祖先组件向后代组件传递数据。下面是 <code>inject</code> 的详细解释和用法：</p><h3 id="inject-的作用" tabindex="-1"><code>inject</code> 的作用 <a class="header-anchor" href="#inject-的作用" aria-label="Permalink to &quot;\`inject\` 的作用&quot;">​</a></h3><p><code>inject</code> 选项允许一个组件声明它依赖于祖先组件提供的数据。这对于跨级别的组件通信非常有用，而不需要通过中间组件逐层传递数据。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>假设你有一个组件树，其中某些数据需要在多个组件之间共享，你可以通过 <code>provide</code> 和 <code>inject</code> 来实现：</p><ol><li><p><strong><code>provide</code> 选项</strong>：用于在祖先组件中定义需要共享的数据。</p></li><li><p><strong><code>inject</code> 选项</strong>：用于在后代组件中声明需要依赖的祖先组件提供的数据。</p></li></ol><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><p><strong>祖先组件（提供数据）</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ParentComponent.vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      taskId: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.taskId</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      taskId: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;task1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;task2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;task3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>后代组件（注入数据）</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ChildComponent.vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inject: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;taskId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.taskId); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;task1&#39;, &#39;task2&#39;, &#39;task3&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h3><ul><li><p><strong>祖先组件 (<code>ParentComponent.vue</code>)</strong>：使用 <code>provide</code> 选项将 <code>taskId</code> 数据提供给其所有后代组件。这些数据会被传递到子组件中，而不需要通过 props 逐层传递。</p></li><li><p><strong>后代组件 (<code>ChildComponent.vue</code>)</strong>：使用 <code>inject</code> 选项声明它需要从祖先组件中注入 <code>taskId</code>。<code>this.taskId</code> 将直接访问到从祖先组件传递过来的数据。</p></li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><code>inject</code> 只能接收祖先组件中通过 <code>provide</code> 选项提供的数据。</li><li><code>inject</code> 的数据是响应式的，即如果祖先组件的数据发生变化，子组件中注入的数据也会相应变化。</li><li><code>inject</code> 只提供数据，不能用来注入方法或计算属性。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>inject</code> 主要用于组件树中实现跨级别的依赖注入，简化了组件之间的数据传递。它与 <code>provide</code> 配合使用，使得在大型应用中能够有效地共享和管理数据。</p>`,19),p=[t];function r(d,c,k,o,E,u){return i(),a("div",null,p)}const h=s(l,[["render",r]]),b=Object.freeze(Object.defineProperty({__proto__:null,__pageData:e,default:h},Symbol.toStringTag,{value:"Module"}));export{b as _,e as __pageData,h as default};
